version: "3"

services:
  reverse-proxy:
    build:
      context: .
      dockerfile: reverse-proxy/Dockerfile
    volumes:
      - "/run/docker.sock:/var/run/docker.sock:ro"
    restart: "on-failure"
    networks:
      - net
      - ecommerce-network
    depends_on:
      - inventory-service
      - customer-service
      - order-service
    ports:
      - "1500:80"
      - "443:443"
  zookeeper:
    hostname: zookeeper-host
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "22181:2181"
    networks:
      - kafka-network
    restart: on-failure
  kafka:
    hostname: kafka-host
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper-host:2181
      KAFKA_ADVERTISED_LISTENERS: INSIDE://:9092,OUTSIDE://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TOPICS_AUTO_CREATE: "true"
      KAFKA_TOPICS: "order:1:1,payment:1:1,credit:1:1"
    networks:
      - kafka-network
    restart: on-failure
  inventory-service:
    hostname: inventory-service-host
    build:
      context: .
      dockerfile: ./inventory-service/Dockerfile
    networks:
      - ecommerce-network
      - kafka-network
    depends_on:
      - kafka
    restart: on-failure
    environment:
      APP_NAME: "inventory-service"
      APP_HTTP_PORT: "80"
      DB_DSN: "postgres://postgres:postgres@inventory-database-host:5432/inventory?sslmode=disable"
      DB_MAX_IDLE_CONNECTIONS: "20"
      DB_MAX_OPEN_CONNECTIONS: "100"
      DB_MAX_IDLE_DURATION_IN_SECS: "60"
      DB_MAX_LIFE_TIME_DURATION_IN_SECS: "300"
      KAFKA_BROKERS: "kafka-host:9092"
  customer-service:
    hostname: customer-service-host
    build:
      context: .
      dockerfile: ./customer-service/Dockerfile
    networks:
      - ecommerce-network
      - kafka-network
    depends_on:
      - kafka
    restart: on-failure
    environment:
      APP_NAME: "customer-service"
      APP_HTTP_PORT: "80"
      DB_DSN: "postgres://postgres:postgres@customer-database-host:5432/customer?sslmode=disable"
      DB_MAX_IDLE_CONNECTIONS: "20"
      DB_MAX_OPEN_CONNECTIONS: "100"
      DB_MAX_IDLE_DURATION_IN_SECS: "60"
      DB_MAX_LIFE_TIME_DURATION_IN_SECS: "300"
      KAFKA_BROKERS: "kafka-host:9092"
  order-service:
    hostname: order-service-host
    build:
      context: .
      dockerfile: ./order-service/Dockerfile
    networks:
      - ecommerce-network
      - kafka-network
    depends_on:
      - kafka
    environment:
      APP_NAME: "order-service"
      APP_HTTP_PORT: "80"
      DB_DSN: "postgres://postgres:postgres@order-database-host:5432/order?sslmode=disable"
      DB_MAX_IDLE_CONNECTIONS: "20"
      DB_MAX_OPEN_CONNECTIONS: "100"
      DB_MAX_IDLE_DURATION_IN_SECS: "60"
      DB_MAX_LIFE_TIME_DURATION_IN_SECS: "300"
      KAFKA_BROKERS: "kafka-host:9092"
    restart: on-failure
networks:
  ecommerce-network:
    external: false
  net:
    external: true
  kafka-network:
